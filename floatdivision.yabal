#include <stdint.h>
#include <stdio.h>

typedef struct Float16 {
  uint16_t sign;
  uint16_t fraction;
  uint16_t exponent;
} Float16;



uint16_t XOR(uint16_t a, uint16_t b){
    return a^b;
}

uint16_t NOT(uint16_t a){
    return ~a;
}



Float16 fp32_div_kernel (Float16 a, Float16 b)
{
    uint16_t r = 0;
    uint16_t x = 0;
    uint16_t y = 0;
    uint16_t sign = 0;

    uint16_t expo_x = 0;
    uint16_t expo_y = 0;

    uint8_t i = 0;
    uint16_t odd =0;
    uint16_t rnd = 0;
    uint16_t sticky = 0;

    Float16 outVal;

    /* extract biased exponents and sign bits */
    expo_x = a.exponent;
    expo_y = b.exponent;
    sign = XOR(a.sign, b.sign);

    if ((expo_x >= 1) && (expo_x <= 0b11110) &&
        (expo_y >= 1) && (expo_y <= 1)) { /* fast path */
divide:
        /* add significand leading 1 int */
        x = a.fraction + 0b10000000000;
        y = b.fraction + 0b10000000000;
        /* compute exponent of result */
        outVal.exponent = expo_x - expo_y + 15;
        /* dividend may not be smaller than divisor: normalize */
        if (x < y) {
            x = x << 1;
            outVal.exponent--;
        }
        /* generate quotient one bit at at time */
        r = 0;
        for (i = 0; i < 12; i++) {
            r = r << 1;
            if (x >= y) {
                x = x - y;
                r = r | 1;
            }
            x = x << 1;
        }
        /* OR remainder bits into sticky bit */
        sticky = (x != 0);
        if ((outVal.exponent >= 1) && 
            (outVal.exponent <= 0b11110)) { /* normal, may overflow to infinity*/
            /* extract round and lsb bits */
            rnd = (r & 1);
            odd = (r & 2) != 0;
            /* remove round bit from quotient and round to-nearest-even */
            r = (r >> 1) + (rnd & (sticky | odd));
            /* set significand */
            outVal.fraction = r - 0b10000000000;
        } else if ((int16_t)outVal.exponent > 0b11110) { // overflow: infinity
            outVal.exponent = 0b011111;
        } else { /* underflow: result is zero, subnormal, or smallest normal */
            uint8_t shift = (uint8_t)(1 - outVal.exponent);
            /* clamp shift count */
            if (shift > 12) shift = 12;
            /* OR shifted-off bits of significand into sticky bit */
            sticky = sticky | ((r & NOT(NOT(0) << shift)) != 0);
            /* denormalize significand */
            r = r >> shift;
            /* extract round and lsb bits */
            rnd = (r & 1);
            odd = (r & 2) != 0;
            /* remove round bit from quotient and round to-nearest-even */
            // r = (r >> 1) + (rnd & (sticky | odd));
            outVal.fraction = (r >> 1) + (rnd & (sticky | odd));
        }
        // /* combine sign bit with combo of exponent and significand */
        // r = r | sign;
        outVal.sign = sign;
    } else { /* slow path */
        // /* take absolute value of arguments */
        // x = a & NOT(SIGN_MASK);
        // y = b & NOT(SIGN_MASK);
        /* if dividend is a NaN, convert that NaN into a QNaN and return it */
        if ((a.exponent == 0b11111) && (a.fraction > 0)){
            outVal.sign = a.sign;
            outVal.fraction = a.fraction | 0b1000000000;
            outVal.exponent = a.exponent;
            return outVal;
        }
        /* if divisor is a NaN, convert that NaN into a QNaN and return it */
        if ((b.exponent == 0b11111) &&(b.fraction > 0)){
            outVal.sign = b.sign;
            outVal.fraction = b.fraction | 0b1000000000;
            outVal.exponent = b.exponent;
            return outVal;
        }
        /* dividend and divisor are both zero or infinity: invalid operation */
        if (((a.exponent == 0 && a.fraction == 0) && (b.exponent == 0 && b.fraction == 0)) || 
            ((a.exponent == 0b11111) && (b.exponent == 0b11111)))
        {
            outVal.sign = 1;
            outVal.fraction = 0b1000000000;
            outVal.exponent = 0b11111;
            return outVal;
        }
        /* 0/y or x/INF -> 0 */
        if ((a.exponent == 0 && a.fraction == 0) || (a.exponent == 0b11111))
        {
            outVal.sign = sign;
            return outVal;
        }
        /* x/0 or INF/y -> INF */
        if ((b.exponent == 0 && b.fraction == 0) || (a.exponent == 0b11111))
        {
            outVal.sign = sign;
            outVal.fraction = 0;
            outVal.exponent = 0b11111;
            return outVal;
        }
        /* if dividend is a subnormal, normalize it */
        if (expo_x == 0) {
            expo_x++;
            uint16_t afrac = a.fraction;
            for (int as = 0; as < 16; as++){
                if((afrac & 0b10000000000)==0b10000000000)
                    break;
                afrac = afrac << 1;
                expo_x--;
            }
            a.fraction = afrac;
        }
        /* if divisor is a subnormal, normalize it */
        if (expo_y == 0) {
            expo_y++;
            uint16_t bfrac = b.fraction;
            for (int bs = 0; bs < 16; bs++){
                if((bfrac & 0b10000000000)==0b10000000000)
                    break;
                bfrac = bfrac << 1;
                expo_y--;
            }
            b.fraction = bfrac;
        }
        /* now that dividend and divisor are normalized, do the division */
        goto divide;
    }
    return outVal;
}


int main()
{
    printf("Hello World\n");

    Float16 aIn;
    aIn.sign = 0;
    aIn.fraction = 0b0001100000;
    aIn.exponent = 0b10101;

    Float16 bIn;
    bIn.sign = 0;
    bIn.fraction = 0b1001000000;
    bIn.exponent = 0b10011;
    
    // 70 / 25.2 = 2.7777
    Float16 ou = fp32_div_kernel(aIn, bIn);
    
    int k, c;
    
    // Print sign
    if (ou.sign & 1)
      printf("1");
    else
      printf("0");

    printf(" ");
    
    // Print exponent
    for (c = 4; c >= 0; c--)
  {
    k = ou.exponent >> c;

    if (k & 1)
      printf("1");
    else
      printf("0");
  }
    
    printf(" ");
    // Print mantissa
    for (c = 9; c >= 0; c--)
  {
    k = ou.fraction >> c;

    if (k & 1)
      printf("1");
    else
      printf("0");
  }

    return 0;
}