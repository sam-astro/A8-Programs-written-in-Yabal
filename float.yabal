var chars = create_pointer(53546, 1)
var offset = 0

// struct Float16 {
//     int sign : 1
//     int exponent : 5
//     int fraction : 10
// }

//Float16 PI = {0b0, 0b10000, 0b1001001000}

void write(int c) {
    chars[offset] = c
    offset++
}

void newline(){
    offset = offset / 18 * 18 + 18
}

void write_int(int value) {
    var reverser = create_pointer(65530, 0)
    var i = 0
    for (var i = 0; i < 5; i++){
        reverser[i] = 0
    }
    while (value > 0) {
        var char = (value % 10) switch {
            1 => '1',
            2 => '2',
            3 => '3',
            4 => '4',
            5 => '5',
            6 => '6',
            7 => '7',
            8 => '8',
            9 => '9',
            _ => '0'
        }

        reverser[i] = char
        value = value / 10
        i += 1
    }
    for (var i = 0; i < 5; i++){
        write(reverser[4-i])
    }
}

void write_binary(int value) {
    var reverser = create_pointer(65519, 0)
    var i = 0
    for (var i = 0; i < 16; i++){
        reverser[i] = 0
    }
    while (value > 0) {
        var char = (value & 1) switch {
            1 => '1',
            _ => '0'
        }

        reverser[15-i] = char
        value = value >> 1
        i += 1
    }
    for (var i = 0; i < 16; i++){
        write(reverser[i])
    }
}

// void write_float(Float16 value) {
//     if (value.sign == 1) {
//         write('-')
//     }

//     write_int(value.exponent)
//     write('.')
//     write_int(value.fraction)
// }

// Quadratic approximation of the sin function
//Float16 sin(Float16 x){
//  return ((4*x)/pow(PI, 2))*(PI-x)
//}


int Negative(int x){
    return ((~x)+1)
}


int get_shift_amnt(int man, int exp){
    return 10-exp
}

// string DecimalToBinaryString(int a)
// {
//     uint b = (uint)a
//     string binary = ""
//     uint mask = 0x80000000u
//     while (mask > 0)
//     {
//         binary += ((b & mask) == 0) ? '0' : '1'
//         mask >>= 1
//     }
//     return binary
// }

// Returns the integer base raised to the power integer exponent
int pow(int base, int exponent){
    var calculated = base
    for (var i = 1; i < exponent; i++){
        calculated = calculated * base
    }
    return calculated
}

// Return the integer rounded approximation of a float
int FloatToInt(int sign, int exponent, int mantissa){
    int tmpM = mantissa + 0b10000000000
    //newline()
    //write_binary(tmpM)
    int tmpE = exponent - 15
    //newline()
    //write_binary(tmpE)
    int out = tmpM >> get_shift_amnt(tmpM, tmpE)
    //newline()
    //write_binary(out)
    return out
}

int AddFloats(int signA, int exponentA, int mantissaA, int signB, int exponentB, int mantissaB){
    int out = 0
    if(exponentA > exponentB){
        //exponentB = signB == 0 ? exponentB : Negative(exponentB);
        int tmpMA = mantissaB<<(exponentA-exponentB)
        int tmpMB = mantissaA
        
        if(signB != 0)
            tmpMA = Negative(tmpMA)
        if(signA != 0)
            tmpMB = Negative(tmpMB)
        
        int tmpM = tmpMA+tmpMB
        out = FloatToInt(signA, exponentB+1, tmpM)
    }
    else if(exponentA < exponentB){
        int tmpMA = mantissaB
        int tmpMB = mantissaA<<(exponentB-exponentA)
        
        if(signB != 0)
            tmpMA = Negative(tmpMA)
        if(signA != 0)
            tmpMB = Negative(tmpMB)
        
        int tmpM = tmpMA+tmpMB
        out = FloatToInt(signA, exponentA+1, tmpM)
    }
    else {
        int tmpMA = mantissaB>>1
        int tmpMB = mantissaA>>1
        
        if(signB != 0)
            tmpMA = Negative(tmpMA)
        if(signA != 0)
            tmpMB = Negative(tmpMB)
        
        int tmpM = tmpMA+tmpMB
        out = FloatToInt(signA, exponentB+1, tmpM)
    }

    return out;
}

int MultFloats(int signA, int exponentA, int mantissaA, int signB, int exponentB, int mantissaB){
    int out = 0
    int tmpMA = mantissaA | 0b10000000000
    int tmpMB = mantissaB | 0b10000000000
    if(exponentA > exponentB){
        int tmpMA = mantissaA<<(exponentA-exponentB)
        int tmpMB = mantissaB
    }
    else if(exponentA < exponentB){
        int tmpMA = mantissaA
        int tmpMB = mantissaB<<(exponentB-exponentA)
    }
    else {
        int tmpMA = mantissaA>>1
        int tmpMB = mantissaB>>1
    }
    int tmpM = tmpMA*tmpMB
    out = FloatToInt(signA, ((exponentA)+exponentB), tmpM)
    
    return out
}

// int SubFloats(int signA, int exponentA, int mantissaA, int signB, int exponentB, int mantissaB){
//     return AddFloats(signA, exponentA, mantissaA, !signB, exponentB, mantissaB)
// }



// t1: Float to int 160
write('t')
write('1')
write(' ')
var val = FloatToInt(0, 0b10110, 0b0100000000)
write_int(val)
newline()
// write_binary(val) // Binary should be: 0000000010100000

// t2: Add floats 160 + 160 = 320
write('t')
write('2')
write(' ')
var val = AddFloats(0, 0b10110, 0b0100000000, 0, 0b10110, 0b0100000000)
write_int(val)
newline()

// t3: Add floats 150 + 500 = 650
write('t')
write('3')
write(' ')
var val = AddFloats(0, 0b10110, 0b0010110000, 0, 0b10111, 0b1111010000)
write_int(val)
newline()

// t4: Multiply floats 10 * 2 = 20
write('t')
write('4')
write(' ')
var val = MultFloats(0, 0b10010, 0b0100000000, 0, 0b10000, 0b0000000000)
write_int(val)
newline()
write_binary(val)
newline()


//cout << DecimalToBinaryString(val) << " : " << val << endl

//    cout << "Float To Int: 13.78" <<endl;
//    val = FloatToInt(0, 0b10010, 0b1011100011);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

//    cout << "Float To Int: 2100" <<endl;
//    val = FloatToInt(0, 0b11010, 0b0000011010);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

//    cout << "Float To Int: 3.141" <<endl;
//    val = FloatToInt(0, 0b10000, 0b1001001000);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

//    cout << "Add floats: 3.141 + 20 = 23.141" <<endl;
//    val = AddFloats(0, 0b10000, 0b1001001000, 0, 0b10011, 0b0100000000);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

//    cout << "Add floats: 281 + 425.5 = 706.5" <<endl;
//    val = AddFloats(0, 0b10111, 0b0001100100, 0, 0b10111, 0b1010100110);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

//    cout << "Sub floats: 800 - 425.5 = 374.5" <<endl;
//    val = SubFloats(0, 0b11000, 0b1001000000, 0, 0b10111, 0b1010100110);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

//    cout << "Mult floats: 15 * 3.5 = 52.5" <<endl;
//    val = MultFloats(0, 0b10010, 0b1110000000, 0, 0b10000, 0b1100000000);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

//    cout << "Mult floats: 300 * 3.5 = 1050" <<endl;
//    val = MultFloats(0, 0b10111, 0b0010110000, 0, 0b10000, 0b1100000000);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

//    cout << "Mult floats: 300 * 0.5 = 150" <<endl;
//    val = MultFloats(0, 0b10111, 0b0010110000, 0, 0b01110, 0b0000000000);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

//    cout << "Mult floats: 0.5 * 0.5 = 0.25" <<endl;
//    val = MultFloats(0, 0b01110, 0b0000000000, 0, 0b01110, 0b0000000000);
//    cout << DecimalToBinaryString(val) << " : " << val << endl;
//    cout<<endl;

while (true) {
    
}
