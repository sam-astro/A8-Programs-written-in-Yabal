
const var pixels = create_pointer(61439)

//const var channelA = "0 1 2 3 4 5 6 7"
//const var channelA = "0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 9 A B C D"
//const var channelB = "0 1 2 3 4 5 6 7 0"
// const var channelC = "0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D "
// const var channelD = "0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D "

const var channelA = "PPPPP000PPPPP00000PPPPP0000KKKKK0000PPPPP0000UUUUUUUU0000000FFFFFF00000000000DDDDD00000FFFFF00000DDDDD000HHHHH000JJJJJ000JJJJJ000HHHHH000FFFFF000000"
const var channelB = "DDDDD000DDDDD00000DDDDD0000AAAAA0000DDDDD0000FFFFFFFF000000077777700000000000KKKKK00000AAAAA00000AAAAA000AAAAA000BBBBB000BBBBB000AAAAA000AAAAA00000000000000"
//const var channelB = "A 0 0 0 0 "
const var channelC = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
const var channelD = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
//const var channelD = "7770000777000000777000000777000000077700000077700000000000777000"


// const var channelC = "03 03 03 03 03 03 00 00 00 00 06 06 06 06 06 06 00 00 00 00 03 03 03 03 03 03 00 00 00 00 06 06 06 06 06 06 00 00 00 00 03 03 03 03 03 03 00 00 00 00 05 05 05 05 05 05 00 00 00 00 03 03 03 03 03 03 00 00 00 00 05 05 05 05 05 05 00 00 00 00 00 00 00"
// const var channelD = "25 30 30 00 00 00 00 00 00 12 12 00 00 00 00 00 00 00 00 00 25 30 30 00 00 00 00 00 00 12 12 00 00 00 00 00 00 00 00 00 25 30 30 00 00 00 00 00 00 12 12 00 00 00 00 00 00 00 00 00 25 30 30 00 00 00 00 00 00 12 12 00 00 00 00 00 00 00 00 00 25 30 30"

const var chars = create_pointer(61294)
const var title = "musical"

var selection = 0
var curChar = 0
var noteVal = 0
var freqVal = 0
var playing = 0
var trackerLocation = 0
var keyInput = 168
var lastKey = 168

var b36cA = 5
var b36cB = 0
var b36cC = 0


// Print title to char mem
for(var i = 0; i < sizeof(title); i++)
    chars[i] = title[i]
// Print paused char
chars[9] = 1



// Draw background on left side of screen
for(var sectionCount = 1; sectionCount < 11; sectionCount += 2)
    for(var x = 0; x < 17; x++)
        for(var y = sectionCount*6; y < (sectionCount*6)+6; y++)
            pixels[(y * 64)+x] = 5293
for(var sectionCount = 2; sectionCount < 10; sectionCount += 2)
    for(var x = 0; x < 17; x++)
        for(var y = sectionCount*6; y < (sectionCount*6)+6; y++)
            pixels[(y * 64)+x] = 4234

// Print arrow to show where the tracker currently is
chars[51] = 10
pixels[2057] = 65535
pixels[2058] = 65535
pixels[1993] = 65535
pixels[2121] = 65535


for(var sectionCount = 1; sectionCount < 11; sectionCount += 2)
    for(var x = 18; x < 60; x++)
        for(var y = sectionCount*6; y < (sectionCount*6)+6; y++)
            pixels[(y * 64)+x] = 4229
for(var sectionCount = 2; sectionCount < 10; sectionCount += 2)
    for(var x = 18; x < 60; x++)
        for(var y = sectionCount*6; y < (sectionCount*6)+6; y++)
            pixels[(y * 64)+x] = 3171

// Draw dividing lines between tracks
for(var x = 26; x < 60; x += 11)
    for(var y = 6; y < 60; y += 2)
        pixels[(y * 64)+x] = 12684

// Clear expansion port value
asm{
    LDAIN 168
    WREXP
}

void GetFreq(){
    freqVal = curChar switch {
        '1' => 1,
        '2' => 2,
        '3' => 3,
        '4' => 4,
        '5' => 5,
        '6' => 6,
        '7' => 7,
        '8' => 8,
        '9' => 9,
        'A' => 10,
        'B' => 11,
        'C' => 12,
        'D' => 13,
        'E' => 14,
        'F' => 15,
        'G' => 16,
        'H' => 17,
        'I' => 18,
        'J' => 19,
        'K' => 20,
        'L' => 21,
        'M' => 22,
        'N' => 23,
        'O' => 24,
        'P' => 25,
        'Q' => 26,
        'R' => 27,
        'S' => 28,
        'T' => 29,
        'U' => 30,
        'V' => 31,
        _ => 0
    }
}

void B36Increase(){
    b36cA += 1
    if(b36cA == 36){
        b36cA = 0
        b36cB += 1
    }
    if(b36cB == 36){
        b36cB = 0
        b36cC += 1
    }
    if(b36cC == 36)
        b36cC = 0
}

void B36Decrease(){
    b36cA -= 1
    if(b36cA == 65534){
        b36cA = 35
        b36cB -= 1
    }
    if(b36cB == 65534){
        b36cB = 35
        b36cC -= 1
    }
    if(b36cC == 65534)
        b36cC = 35
}

var b36charA = 0
var b36charB = 0
var b36charC = 0
void B36ToChar(){
    if(b36cC<=9){
        b36charC = b36cC + 39
        if(b36charC=='0')
            b36charC=0
    }
    else
        b36charC = b36cC + 3

    if(b36cB<=9){
        b36charB = b36cB + 39
        if(b36charB=='0' && b36charC == 0)
            b36charB=0
    }
    else
        b36charB = b36cB + 3

    if(b36cA<=9)
        b36charA = b36cA + 39
    else
        b36charA = b36cA + 3
}

void ClearCurrectSelection(){
    var xPos = 18
    var xWidth = 8
    if(selection == 0){
        xPos = 18
        xWidth = 8
    }
    else if(selection == 1){
        xPos = 27
        xWidth = 11
    }
    else if(selection == 2){
        xPos = 39
        xWidth = 11
    }
    else if(selection == 3){
        xPos = 51
        xWidth = 9
    }

    for(var x = xPos; x < xPos + xWidth; x++)
        for(var y = 30; y < 30 + 6; y++)
            pixels[(y * 64)+x] = 4229
}

void DrawNewSelection(){
    var xPos = 18
    var xWidth = 12
    if(selection == 0){
        xPos = 18
        xWidth = 8
    }
    else if(selection == 1){
        xPos = 27
        xWidth = 11
    }
    else if(selection == 2){
        xPos = 39
        xWidth = 11
    }
    else if(selection == 3){
        xPos = 51
        xWidth = 9
    }

    for(var x = xPos; x < xPos + xWidth; x++)
        for(var y = 30; y < 30 + 6; y++)
            pixels[(y * 64) + x] = 2345
}

void UpdateTrackerValues(){
    for(var i = 1; i < 10; i++){
        if(trackerLocation-5+i>65530 || trackerLocation-5+i >= sizeof(channelA)){
            chars[(i*10)+3] = ' '
            chars[(i*10)+5] = ' '
            chars[(i*10)+7] = ' '
            chars[(i*10)+9] = ' '
            continue
        }
        
        chars[(i*10)+3] = channelA[trackerLocation-5+i]

        if(trackerLocation-5+i < sizeof(channelB))
            chars[(i*10)+5] = channelB[trackerLocation-5+i]
        else
            chars[(i*10)+5] = 78

        if(trackerLocation-5+i < sizeof(channelC))
            chars[(i*10)+7] = channelC[trackerLocation-5+i]
        else
            chars[(i*10)+7] = 78

        if(trackerLocation-5+i < sizeof(channelD))
            chars[(i*10)+9] = channelD[trackerLocation-5+i]
        else
            chars[(i*10)+9] = 78
    }
}

void UpdateTrackerIndexes(){

    for(var i = 0; i < 9; i++)
        B36Decrease()

    for(var i = 1; i < 10; i++){

        B36Increase()

        if(i == 5)
            continue
            
        if(trackerLocation-5+i>65530 || trackerLocation-5+i >= sizeof(channelA)){
            chars[(i*10)] = ' '
            chars[(i*10)+1] = ' '
            chars[(i*10)+2] = ' '
            continue
        }

        B36ToChar()
        
        chars[i*10] = b36charC
        chars[i*10+1] = b36charB
        chars[i*10+2] = b36charA
    }
}

void EditTrackerVal(){
    if(selection == 0)
        channelA[trackerLocation] = keyInput
    else if(selection == 1)
        channelB[trackerLocation] = keyInput
    else if(selection == 2)
        channelC[trackerLocation] = keyInput
    else if(selection == 3)
        channelD[trackerLocation] = keyInput
}

// Draw the selection box for the first time
DrawNewSelection()

while(true){
    if(playing == 0){
        // Read key input from expansion port
        asm{
            RDEXP
            STA @keyInput
        }
        keyInput = keyInput & 255
        if(keyInput != lastKey){
            if(keyInput == 71 && trackerLocation > 0) { // Up arrow
                trackerLocation -= 1
                B36Decrease()
            }
            else if(keyInput == 72 && trackerLocation < sizeof(channelA) - 1) { // Down arrow
                trackerLocation += 1
                B36Increase()
            }
            else if(keyInput == 9 && selection > 0){ // Left arrow
                ClearCurrectSelection()
                selection -= 1
                DrawNewSelection()
            }
            else if(keyInput == 10 && selection < 3){ // Right arrow
                ClearCurrectSelection()
                selection += 1
                DrawNewSelection()
            }
            else if(keyInput == 8){ // '_' for pause/play
                playing = 1
                chars[9] = 10
            }
            else if(keyInput == 70){ // backspace, return to beginning
                trackerLocation = 0
                b36cA = 5
                b36cB = 0
                b36cC = 0
                UpdateTrackerValues()
                UpdateTrackerIndexes()
            }
            else if(keyInput >= 13 && keyInput <= 61) // If not a control key, use as input to change current frequency
                if(keyInput != 36 && keyInput != 37 && keyInput != 38)
                    EditTrackerVal()

            UpdateTrackerValues()
            UpdateTrackerIndexes()
        }
        lastKey = keyInput
    }

    if (playing == 1) {
        // Iterate through all notes and play them
        var maxSize = sizeof(channelA)
        maxSize -= 1
        while(trackerLocation < maxSize && playing == 1) {
            
            UpdateTrackerValues()
            UpdateTrackerIndexes()

            // Read key input from expansion port
            asm{
                RDEXP
                STA @keyInput
            }
            keyInput = keyInput & 255
            if(keyInput != lastKey)
                if(keyInput == 8){ // '_' for pause/play
                    playing = 0
                    chars[9] = 1
                }
            lastKey = keyInput


            ///////////////
            // Channel A //
            ///////////////


            // Process new note
            
            freqVal = 0
            curChar = channelA[trackerLocation]
            GetFreq()
            
            // Shift left
            freqVal = freqVal << 11

            // // Also add channel ID
            freqVal += 256

            // Write note value to expansion port
            asm{
                AIN @freqVal
                WREXP
            }



            ///////////////
            // Channel B //
            ///////////////

            if(trackerLocation < sizeof(channelB)){
                // Process new note

                freqVal = 0
                curChar = channelB[trackerLocation]
                GetFreq()

                // Shift left
                freqVal = freqVal << 11

                // // Also add channel ID
                freqVal += 512

                // Write note value to expansion port
                asm{
                    AIN @freqVal
                    WREXP
                }
            }



            ///////////////
            // Channel C //
            ///////////////

            if(trackerLocation < sizeof(channelC)){
                // Process new note

                freqVal = 0
                curChar = channelC[trackerLocation]
                GetFreq()

                // Shift left
                freqVal = freqVal << 11

                // // Also add channel ID
                freqVal += 768

                // Write note value to expansion port
                asm{
                    AIN @freqVal
                    WREXP
                }
            }



            ///////////////
            // Channel D //
            ///////////////
            
            if(trackerLocation < sizeof(channelD)){
                // Process new note

                freqVal = 0
                curChar = channelD[trackerLocation]
                GetFreq()

                // Shift left
                freqVal = freqVal << 11

                // // Also add channel ID
                freqVal += 1024

                // Write note value to expansion port
                asm{
                    AIN @freqVal
                    WREXP
                }
            }


            // Delay for the next set of notes
            for (var l = 0; l < 9000; l++){
                for (var o = 0; o < 1; o++){
                    // Do nothing  _(¦3」∠)_
                }
            }

            trackerLocation += 1
            B36Increase()
            
        }


        // Stop all audio channels
        asm{
            LDIA 256
            WREXP
            LDIA 512
            WREXP
            LDIA 768
            WREXP
            LDIA 1024
            WREXP
        }


        // trackerLocation = 0

        // b36cA = 5
        // b36cB = 0
        // b36cC = 0

        UpdateTrackerValues()
        UpdateTrackerIndexes()

        playing = 0
        chars[9] = 1
    }
}