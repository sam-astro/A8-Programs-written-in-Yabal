
const var pixels = create_pointer(61439)

const var channelA = "0 1 2 3 4 5 6 7"
//const var channelA = "0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 9 A B C D"
const var channelB = "0 1 2 3 4 5 6 7 0"
// const var channelC = "0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D "
// const var channelD = "0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D 0 1 2 3 4 5 6 7 8 9 A B C D "

//const var channelA = "P P P P P 0 0 0 P P P P P 0 0 0 0 0 P P P P P 0 0 0 0 K K K K K 0 0 0 0 P P P P P 0 0 0 0 U U U U U U U U 0 0 0 0 0 0 0 F F F F F F 0 0 0 0 0 0 0 0 0 0 0 D D D D D 0 0 0 0 0 F F F F F 0 0 0 0 0 D D D D D 0 0 0 H H H H H 0 0 0 J J J J J 0 0 0 J J J J J 0 0 0 H H H H H 0 0 0 F F F F F 0 0 0 0 0 0"
// const var channelB = "D D D D D 0 0 0 D D D D D 0 0 0 0 0 D D D D D 0 0 0 0 A A A A A 0 0 0 0 D D D D D 0 0 0 0 F F F F F F F F 0 0 0 0 0 0 0 7 7 7 7 7 7 0 0 0 0 0 0 0 0 0 0 0 K K K K K 0 0 0 0 0 A A A A A 0 0 0 0 0 A A A A A 0 0 0 A A A A A 0 0 0 B B B B B 0 0 0 B B B B B 0 0 0 A A A A A 0 0 0 A A A A A 0 0 0 0 0 0"
//const var channelB = "A 0 0 0 0 "
const var channelC = "P 0 0 0 0 0 0 0"
const var channelD = "D 0 0 0 0 0 0 0"
//const var channelD = "7 7 7 0 0 0 0 7 7 7 0 0 0 0 0 0 7 7 7 0 0 0 0 0 0 7 7 7 0 0 0 0 0 0 0 7 7 7 0 0 0 0 0 0 7 7 7 0 0 0 0 0 0 0 0 0 0 0 7 7 7 0 0 0"


// const var channelC = "03 03 03 03 03 03 00 00 00 00 06 06 06 06 06 06 00 00 00 00 03 03 03 03 03 03 00 00 00 00 06 06 06 06 06 06 00 00 00 00 03 03 03 03 03 03 00 00 00 00 05 05 05 05 05 05 00 00 00 00 03 03 03 03 03 03 00 00 00 00 05 05 05 05 05 05 00 00 00 00 00 00 00"
// const var channelD = "25 30 30 00 00 00 00 00 00 12 12 00 00 00 00 00 00 00 00 00 25 30 30 00 00 00 00 00 00 12 12 00 00 00 00 00 00 00 00 00 25 30 30 00 00 00 00 00 00 12 12 00 00 00 00 00 00 00 00 00 25 30 30 00 00 00 00 00 00 12 12 00 00 00 00 00 00 00 00 00 25 30 30"

const var chars = create_pointer(61294)
const var title = "musical"

var selection = 0
var curChar = 0
var noteVal = 0
var freqVal = 0
var playing = 0
var trackerLocation = 0
var keyInput = 168
var lastKey = 168


// Print title to char mem
for(var i = 0; i < sizeof(title); i++){
    chars[i] = title[i]
}
// Print paused char
chars[9] = 1



// Draw background on left side of screen
for(var sectionCount = 1; sectionCount < 11; sectionCount++){
    for(var x = 0; x < 17; x++){
        for(var y = sectionCount*6; y < (sectionCount*6)+6; y++){
            var realLoc = (y * 64)
            realLoc += x
            pixels[realLoc] = 5293
            // pixels[realLoc] = 4234
        }
    }
    sectionCount += 1
}
for(var sectionCount = 2; sectionCount < 10; sectionCount++){
    for(var x = 0; x < 17; x++){
        for(var y = sectionCount*6; y < (sectionCount*6)+6; y++){
            var realLoc = (y * 64)
            realLoc += x
            //pixels[realLoc] = 5293
            pixels[realLoc] = 4234
        }
    }
    sectionCount += 1
}

// Print arrow to show where the tracker currently is
chars[51] = 10
pixels[2057] = 65535
pixels[2058] = 65535
pixels[1993] = 65535
pixels[2121] = 65535


for(var sectionCount = 1; sectionCount < 11; sectionCount++){
    for(var x = 18; x < 60; x++){
        for(var y = sectionCount*6; y < (sectionCount*6)+6; y++){
            var realLoc = (y * 64)
            realLoc += x
            pixels[realLoc] = 4229
            // pixels[realLoc] = 4234
        }
    }
    sectionCount += 1
}
for(var sectionCount = 2; sectionCount < 10; sectionCount++){
    for(var x = 18; x < 60; x++){
        for(var y = sectionCount*6; y < (sectionCount*6)+6; y++){
            var realLoc = (y * 64)
            realLoc += x
            //pixels[realLoc] = 5293
            pixels[realLoc] = 3171
        }
    }
    sectionCount += 1
}

// Draw dividing lines between tracks
for(var x = 26; x < 60; x++){
    for(var y = 6; y < 60; y++){
        var realLoc = (y * 64)
        realLoc += x
        pixels[realLoc] = 12684
        y += 1
    }
    x += 11
}

// Clear expansion port value
asm{
    LDAIN 168
    WREXP
}

void GetFreq(){
    if (curChar == '1'){
        freqVal = 1
    }
    else if (curChar == '2'){
        freqVal = 2
    }
    else if (curChar == '3'){
        freqVal = 3
    }
    else if (curChar == '4'){
        freqVal = 4
    }
    else if (curChar == '5'){
        freqVal = 5
    }
    else if (curChar == '6'){
        freqVal = 6
    }
    else if (curChar == '7'){
        freqVal = 7
    }
    else if (curChar == '8'){
        freqVal = 8
    }
    else if (curChar == '9'){
        freqVal = 9
    }
    else if (curChar == 'A'){
        freqVal = 10
    }
    else if (curChar == 'B'){
        freqVal = 11
    }
    else if (curChar == 'C'){
        freqVal = 12
    }
    else if (curChar == 'D'){
        freqVal = 13
    }
    else if (curChar == 'E'){
        freqVal = 14
    }
    else if (curChar == 'F'){
        freqVal = 15
    }
    else if (curChar == 'G'){
        freqVal = 16
    }
    else if (curChar == 'H'){
        freqVal = 17
    }
    else if (curChar == 'I'){
        freqVal = 18
    }
    else if (curChar == 'J'){
        freqVal = 19
    }
    else if (curChar == 'K'){
        freqVal = 20
    }
    else if (curChar == 'L'){
        freqVal = 21
    }
    else if (curChar == 'M'){
        freqVal = 22
    }
    else if (curChar == 'N'){
        freqVal = 23
    }
    else if (curChar == 'O'){
        freqVal = 24
    }
    else if (curChar == 'P'){
        freqVal = 25
    }
    else if (curChar == 'Q'){
        freqVal = 26
    }
    else if (curChar == 'R'){
        freqVal = 27
    }
    else if (curChar == 'S'){
        freqVal = 28
    }
    else if (curChar == 'T'){
        freqVal = 29
    }
    else if (curChar == 'U'){
        freqVal = 30
    }
    else if (curChar == 'V'){
        freqVal = 31
    }
}

var base36Val = 0
void DecToBase36(){
    var decNum = trackerLocation


}

void ClearCurrectSelection(){
    var xPos = 18
    var xWidth = 8
    if(selection == 0){
        xPos = 18
        xWidth = 8
    }
    else if(selection == 1){
        xPos = 27
        xWidth = 11
    }
    else if(selection == 2){
        xPos = 39
        xWidth = 11
    }
    else if(selection == 3){
        xPos = 51
        xWidth = 9
    }

    for(var x = xPos; x < xPos + xWidth; x++){
        for(var y = 30; y < 30 + 6; y++){
            var realLoc = (y * 64)
            realLoc += x
            pixels[realLoc] = 4229
            //pixels[realLoc] = 31744
        }
    }
}

void DrawNewSelection(){
    var xPos = 18
    var xWidth = 12
    if(selection == 0){
        xPos = 18
        xWidth = 8
    }
    else if(selection == 1){
        xPos = 27
        xWidth = 11
    }
    else if(selection == 2){
        xPos = 39
        xWidth = 11
    }
    else if(selection == 3){
        xPos = 51
        xWidth = 9
    }

    for(var x = xPos; x < xPos + xWidth; x++){
        for(var y = 30; y < 30 + 6; y++){
            var realLoc = (y * 64)
            realLoc += x
            pixels[realLoc] = 2247
            //pixels[realLoc] = 31744
        }
    }
}

void UpdateTrackerValues(){
    chars[50] = trackerLocation
    
    chars[53] = channelA[trackerLocation]
    
    if(trackerLocation < sizeof(channelB)){
        chars[55] = channelB[trackerLocation]
    }
    else {
        chars[55] = '0'
    }
    if(trackerLocation < sizeof(channelC)){
        chars[57] = channelC[trackerLocation]
    }
    else {
        chars[57] = '0'
    }
    if(trackerLocation < sizeof(channelD)){
        chars[59] = channelD[trackerLocation]
    }
    else {
        chars[59] = '0'
    }
}

void UpdateTrackerIndexes(){
    var binNum = trackerLocation
    var digA = '0'
    var digB = '0'
    var digC = '0'

    // if(binNum <= 9){
    //     digC = binNum
    // }
    
    chars[40] = digA
    chars[41] = digB
    chars[42] = digC
}

void EditTrackerVal(){
    if(selection == 0){
        channelA[trackerLocation] = keyInput
    }
    else if(selection == 1){
        channelB[trackerLocation] = keyInput
    }
    else if(selection == 2){
        channelC[trackerLocation] = keyInput
    }
    else if(selection == 3){
        channelD[trackerLocation] = keyInput
    }
}

// Draw the selection box for the first time
DrawNewSelection()

while(true){
    if(playing == 0){
        // Read key input from expansion port
        asm{
            RDEXP
            STA @keyInput
        }
        keyInput = keyInput & 255
        if(keyInput != lastKey){
            if(keyInput == 71){ // Up arrow
                trackerLocation -= 2
            }
            else if(keyInput == 72){ // Down arrow
                trackerLocation += 2
            }
            else if(keyInput == 9 && selection > 0){ // Left arrow
                ClearCurrectSelection()
                selection -= 1
                DrawNewSelection()
            }
            else if(keyInput == 10 && selection < 3){ // Right arrow
                ClearCurrectSelection()
                selection += 1
                DrawNewSelection()
            }
            else if(keyInput == 8){ // '_' for pause/play
                playing = 1
                chars[9] = 10
            }
            else if(keyInput == 168 || keyInput == 0){}
            else { // If not a control key, use as input to change currect frequency
                EditTrackerVal()
            }
            UpdateTrackerValues()
            UpdateTrackerIndexes()
        }
        lastKey = keyInput
    }

    if (playing == 1) {
        trackerLocation = 0

        // Iterate through all notes and play them
        var maxSize = sizeof(channelA)
        maxSize -= 1
        while(trackerLocation < maxSize && playing == 1) {
            
            UpdateTrackerValues()
            UpdateTrackerIndexes()

            // Read key input from expansion port
            asm{
                RDEXP
                STA @keyInput
            }
            keyInput = keyInput & 255
            if(keyInput != lastKey){
                if(keyInput == 8){ // '_' for pause/play
                    playing = 0
                    chars[9] = 1
                }
            }
            lastKey = keyInput



            // if(channelA[trackerLocation] == ' '){
            //     trackerLocation += 1
            // }
            
            ///////////////
            // Channel A //
            ///////////////


            // Process new note
            
            freqVal = 0
            curChar = channelA[trackerLocation]
            GetFreq()
            
            // Shift left
            freqVal = freqVal << 11

            // // Also add channel ID
            freqVal += 256

            // Write note value to expansion port
            asm{
                AIN @freqVal
                WREXP
            }



            ///////////////
            // Channel B //
            ///////////////

            if(trackerLocation < sizeof(channelB)){
                // Process new note

                freqVal = 0
                curChar = channelB[trackerLocation]
                GetFreq()

                // Shift left
                freqVal = freqVal << 11

                // // Also add channel ID
                freqVal += 512

                // Write note value to expansion port
                asm{
                    AIN @freqVal
                    WREXP
                }
            }



            ///////////////
            // Channel C //
            ///////////////

            if(trackerLocation < sizeof(channelC)){
                // Process new note

                freqVal = 0
                curChar = channelC[trackerLocation]
                GetFreq()

                // Shift left
                freqVal = freqVal << 11

                // // Also add channel ID
                freqVal += 768

                // Write note value to expansion port
                asm{
                    AIN @freqVal
                    WREXP
                }
            }



            ///////////////
            // Channel D //
            ///////////////
            
            if(trackerLocation < sizeof(channelD)){
                // Process new note

                freqVal = 0
                curChar = channelD[trackerLocation]
                GetFreq()

                // Shift left
                freqVal = freqVal << 11

                // // Also add channel ID
                freqVal += 1024

                // Write note value to expansion port
                asm{
                    AIN @freqVal
                    WREXP
                }
            }


            // Delay for the next set of notes
            for (var l = 0; l < 9000; l++){
                for (var o = 0; o < 1; o++){
                    // Do nothing  _(¦3」∠)_
                }
            }

            trackerLocation += 2
            
        }


        // Stop all audio channels
        asm{
            LDIA 256
            WREXP
            LDIA 512
            WREXP
            LDIA 768
            WREXP
            LDIA 1024
            WREXP
        }


        trackerLocation = 0

        playing = 0
        chars[9] = 1
    }
}


    
while (true) {

}